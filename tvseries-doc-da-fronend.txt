# DOCUMENTAZIONE COMPLETA TV SERIES - FANCOOLTV

## PANORAMICA GENERALE
Il sistema TV Series è composto da tre componenti principali:
1. TVSeriesFormComponent - Form principale per creare/modificare TV Series
2. TVSeriesFormPageComponent - Componente parent che gestisce il caricamento e salvataggio
3. TVSeries Models - Interfacce TypeScript per la tipizzazione dei dati

## 1. TVSERIES-FORM.COMPONENT.TS

### STRUTTURA PRINCIPALE
```typescript
@Component({
  selector: 'app-tvseries-form',
  templateUrl: './tvseries-form.component.html',
  styleUrls: ['./tvseries-form.component.scss']
})
export class TVSeriesFormComponent implements OnInit, OnDestroy
```

### PROPRIETÀ PRINCIPALI

#### Input/Output Properties
- @Input() tvSeries: TVSeries | null = null
- @Input() isEditMode = false
- @Output() formSubmit = new EventEmitter<any>()
- @Output() formCancel = new EventEmitter<void>()

#### Form Properties
- tvSeriesForm!: FormGroup - Form principale reattivo
- categories: Category[] = [] - Lista categorie
- persons: Person[] = [] - Lista persone per ricerca
- personsForDisplay: Person[] = [] - Persone selezionate per visualizzazione
- countries: any[] = [] - Lista paesi (non utilizzata attualmente)

#### File Upload Properties
- posterFile: File | null = null - File poster selezionato
- backdropFile: File | null = null - File backdrop selezionato
- trailerVideoFile: File | null = null - File trailer video selezionato
- episodeFiles: { [key: string]: File } = {} - File immagini episodi (chiave: "seasonIndex-episodeIndex")
- episodeVideoFiles: { [key: string]: File } = {} - File video episodi (chiave: "seasonIndex-episodeIndex")

#### Preview URLs
- posterPreviewUrl: string | null = null - URL preview poster
- backdropPreviewUrl: string | null = null - URL preview backdrop
- episodeImagePreviewUrls: { [key: string]: string } = {} - URL preview immagini episodi

#### Upload Status Properties
- uploadingPoster = false
- uploadingBackdrop = false
- uploadingTrailerVideo = false
- uploadingEpisodeVideo: { [key: string]: boolean } = {}
- episodeVideoUploadProgress: { [key: string]: number } = {}

#### Validation Properties
- maxYear = new Date().getFullYear() + 1 - Anno massimo consentito
- statusOptions - Opzioni dropdown per lo status

### METODI PRINCIPALI

#### Inizializzazione
```typescript
ngOnInit(): void {
  this.initializeForm();
  this.loadFormData();
  
  if (this.isEditMode && this.tvSeries) {
    this.populateForm();
  }
}
```

#### Inizializzazione Form
```typescript
private initializeForm(): void {
  this.tvSeriesForm = this.fb.group({
    title: ['', [Validators.required, Validators.minLength(2)]],
    year: ['', [Validators.required, Validators.min(1900), Validators.max(new Date().getFullYear() + 5)]],
    imdb_rating: ['', [Validators.min(0), Validators.max(10)]],
    category_id: ['', Validators.required],
    poster: ['', Validators.required],
    backdrop: ['', Validators.required],
    description: ['', [Validators.required, Validators.minLength(10)]],
    total_seasons: ['', [Validators.min(1)]],
    total_episodes: ['', [Validators.min(1)]],
    status: ['published', Validators.required],
    persons: this.fb.array([]),
    trailers: this.fb.array([]),
    seasons: this.fb.array([])
  });
}
```

#### Caricamento Dati Form
```typescript
private loadFormData(): void {
  // Carica categorie
  this.apiService.getCategories().subscribe({
    next: (response: any) => {
      this.categories = response.data || [];
    }
  });

  // Carica persone
  this.apiService.getPersons().subscribe({
    next: (response: any) => {
      this.persons = response.data || [];
    }
  });
}
```

#### Gestione Submit
```typescript
onSubmit(): void {
  if (this.isFormValid()) {
    const formData = this.prepareFormData();
    this.formSubmit.emit(formData);
  } else {
    this.markFormGroupTouched();
  }
}
```

#### Preparazione FormData per Backend
```typescript
private prepareFormData(): FormData {
  const formData = new FormData();
  const formValue = { ...this.tvSeriesForm.value };
  
  // Dati base TV Series
  if (formValue.title) formData.append('title', formValue.title);
  if (formValue.year) formData.append('year', formValue.year.toString());
  if (formValue.category_id) formData.append('category_id', formValue.category_id.toString());
  if (formValue.description) formData.append('description', formValue.description);

  // Mappatura status frontend -> backend
  const statusMapping: { [key: string]: string } = {
    'published': 'ongoing',
    'draft': 'unknown',
    'upcoming': 'upcoming',
    'ended': 'ended'
  };
  const mappedStatus = statusMapping[formValue.status] || 'unknown';
  formData.append('status', mappedStatus);

  // File immagini
  if (this.posterFile) {
    formData.append('poster_image', this.posterFile);
  }
  if (this.backdropFile) {
    formData.append('backdrop_image', this.backdropFile);
  }

  // Trailer video
  if (this.trailerVideoFile) {
    formData.append('trailer_video', this.trailerVideoFile);
  }

  // Array persone (solo ID numerici)
  if (formValue.persons && Array.isArray(formValue.persons)) {
    const persons = formValue.persons
      .filter((person: any) => person.person_id && person.person_id.toString().trim() !== '')
      .map((person: any) => parseInt(person.person_id, 10));
    
    persons.forEach((personId: number) => {
      formData.append('persons[]', personId.toString());
    });
  }

  // Dati stagioni ed episodi
  if (formValue.seasons && Array.isArray(formValue.seasons)) {
    formValue.seasons.forEach((season: any, seasonIndex: number) => {
      if (season.season_number) formData.append(`seasons[${seasonIndex}][season_number]`, season.season_number.toString());
      
      // Calcolo automatico total_episodes
      let totalEpisodes = season.total_episodes;
      if (!totalEpisodes && season.episodes && Array.isArray(season.episodes)) {
        totalEpisodes = season.episodes.length;
      }
      if (totalEpisodes) {
        formData.append(`seasons[${seasonIndex}][total_episodes]`, totalEpisodes.toString());
      }
      
      if (season.year) formData.append(`seasons[${seasonIndex}][year]`, season.year.toString());
      if (season.name) formData.append(`seasons[${seasonIndex}][name]`, season.name);
      if (season.overview) formData.append(`seasons[${seasonIndex}][overview]`, season.overview);
      if (season.premiere_date) formData.append(`seasons[${seasonIndex}][premiere_date]`, season.premiere_date);

      // Episodi per questa stagione
      if (season.episodes && Array.isArray(season.episodes)) {
        season.episodes.forEach((episode: any, episodeIndex: number) => {
          if (episode.episode_number) formData.append(`seasons[${seasonIndex}][episodes][${episodeIndex}][episode_number]`, episode.episode_number.toString());
          if (episode.title) formData.append(`seasons[${seasonIndex}][episodes][${episodeIndex}][title]`, episode.title);
          if (episode.overview) formData.append(`seasons[${seasonIndex}][episodes][${episodeIndex}][overview]`, episode.overview);
          if (episode.air_date) formData.append(`seasons[${seasonIndex}][episodes][${episodeIndex}][air_date]`, episode.air_date);
          if (episode.runtime) formData.append(`seasons[${seasonIndex}][episodes][${episodeIndex}][runtime]`, episode.runtime.toString());
          
          // Status episodio (richiesto dal backend)
          const episodeStatus = episode.status || 'published';
          formData.append(`seasons[${seasonIndex}][episodes][${episodeIndex}][status]`, episodeStatus);

          // File episodi con nomi corretti per backend
          const episodeKey = `${seasonIndex}-${episodeIndex}`;
          if (this.episodeFiles[episodeKey]) {
            formData.append(`seasons[${seasonIndex}][episodes][${episodeIndex}][still_image]`, this.episodeFiles[episodeKey]);
          }
          if (this.episodeVideoFiles[episodeKey]) {
            formData.append(`seasons[${seasonIndex}][episodes][${episodeIndex}][episode_video]`, this.episodeVideoFiles[episodeKey]);
          }
        });
      }
    });
  }

  return formData;
}
```

#### Gestione Upload File

##### Upload Poster
```typescript
onPosterUpload(event: any): void {
  const file = event.target.files[0];
  if (file) {
    this.posterFile = file;
    this.uploadingPoster = false;
    
    // Crea URL preview
    const reader = new FileReader();
    reader.onload = (e: any) => {
      this.posterPreviewUrl = e.target.result;
    };
    reader.readAsDataURL(file);
    
    // Marca poster come valido quando file è selezionato
    this.tvSeriesForm.patchValue({ poster: 'file_selected' });
  }
}
```

##### Upload Backdrop
```typescript
onBackdropUpload(event: any): void {
  const file = event.target.files[0];
  if (file) {
    this.backdropFile = file;
    this.uploadingBackdrop = false;
    
    // Crea URL preview
    const reader = new FileReader();
    reader.onload = (e: any) => {
      this.backdropPreviewUrl = e.target.result;
    };
    reader.readAsDataURL(file);
    
    // Marca backdrop come valido quando file è selezionato
    this.tvSeriesForm.patchValue({ backdrop: 'file_selected' });
  }
}
```

##### Upload Immagine Episodio
```typescript
onEpisodeImageUpload(event: any, seasonIndex: number, episodeIndex: number): void {
  const file = event.target.files[0];
  if (file) {
    const episodeKey = `${seasonIndex}-${episodeIndex}`;
    this.episodeFiles[episodeKey] = file;
    
    // Crea URL preview
    const reader = new FileReader();
    reader.onload = (e: any) => {
      this.episodeImagePreviewUrls[episodeKey] = e.target.result;
    };
    reader.readAsDataURL(file);
  }
}
```

##### Upload Video Episodio
```typescript
onEpisodeVideoUpload(event: any, seasonIndex: number, episodeIndex: number): void {
  const file = event.target.files[0];
  if (file) {
    const episodeKey = `${seasonIndex}-${episodeIndex}`;
    this.episodeVideoFiles[episodeKey] = file;
    this.uploadingEpisodeVideo[episodeKey] = true;
    this.episodeVideoUploadProgress[episodeKey] = 0;
    
    // Simula progress upload
    const interval = setInterval(() => {
      this.episodeVideoUploadProgress[episodeKey] += 10;
      if (this.episodeVideoUploadProgress[episodeKey] >= 100) {
        this.uploadingEpisodeVideo[episodeKey] = false;
        clearInterval(interval);
      }
    }, 200);
  }
}
```

#### Gestione Stagioni ed Episodi

##### Aggiunta Stagione
```typescript
addSeason(): void {
  const seasonGroup = this.fb.group({
    season_number: ['', [Validators.required, Validators.min(1)]],
    total_episodes: ['', [Validators.required, Validators.min(1)]],
    year: ['', [Validators.required, Validators.min(1900), Validators.max(this.maxYear)]],
    name: ['', Validators.required],
    overview: [''],
    premiere_date: [''],
    episodes: this.fb.array([])
  });

  this.seasonsArray.push(seasonGroup);
}
```

##### Aggiunta Episodio
```typescript
addEpisode(seasonIndex: number): void {
  const episodeGroup = this.fb.group({
    title: ['', Validators.required],
    episode_number: ['', [Validators.required, Validators.min(1)]],
    duration: ['', [Validators.required, Validators.min(1)]],
    air_date: [''],
    status: ['published', Validators.required],
    description: ['']
  });

  this.getEpisodesArray(seasonIndex).push(episodeGroup);
}
```

#### Gestione Persone

##### Aggiunta Persona
```typescript
addPerson(): void {
  if (!this.canAddPerson()) return;

  // Aggiunge persona vuota al form array
  const personGroup = this.fb.group({
    person_id: ['', Validators.required],
    role: ['']
  });
  this.personsArray.push(personGroup);

  // Apre modal
  this.personModalRef = this.modalService.show(this.personModal, {
    backdrop: 'static',
    keyboard: false
  });
}
```

##### Ricerca Persona
```typescript
searchPersonInModal(searchTerm: string): void {
  if (!searchTerm || searchTerm.trim().length < 2) {
    this.persons = [];
    return;
  }

  this.isLoadingPersons = true;
  
  this.apiService.searchPersons(searchTerm).subscribe({
    next: (response: any) => {
      this.persons = response.data || [];
      this.isLoadingPersons = false;
    },
    error: (error: any) => {
      this.persons = [];
      this.isLoadingPersons = false;
    }
  });
}
```

#### Validazione Form
```typescript
isFormValid(): boolean {
  // Controlla validità campi base
  const title = this.tvSeriesForm.get('title');
  const year = this.tvSeriesForm.get('year');
  const category = this.tvSeriesForm.get('category_id');
  const description = this.tvSeriesForm.get('description');

  const basicFieldsValid = title?.value && title?.value.length >= 2 &&
                          year?.value && year?.value >= 1900 &&
                          category?.value &&
                          description?.value && description?.value.length >= 10;

  // Controlla file richiesti
  const filesValid = this.posterFile !== null && this.backdropFile !== null;

  return !!(basicFieldsValid && filesValid);
}
```

## 2. TVSERIES-FORM-PAGE.COMPONENT.TS

### STRUTTURA PRINCIPALE
```typescript
@Component({
  selector: 'app-tvseries-form-page',
  templateUrl: './tvseries-form-page.component.html',
  styleUrls: ['./tvseries-form-page.component.scss']
})
export class TVSeriesFormPageComponent implements OnInit
```

### PROPRIETÀ PRINCIPALI
- @ViewChild('tvSeriesForm') tvSeriesForm!: TVSeriesFormComponent
- tvSeries: TVSeries | null = null
- isEditMode = false
- pageTitle = 'Add New TV Series'
- loading = false
- error = ''
- success = ''
- private formDataBackup: any = null - Backup dati form per prevenire perdita dati

### METODI PRINCIPALI

#### Inizializzazione
```typescript
ngOnInit(): void {
  // Controlla se è modalità edit
  const id = this.route.snapshot.paramMap.get('id');
  if (id) {
    this.isEditMode = true;
    this.pageTitle = 'Edit TV Series';
    this.loadTVSeries(+id);
  }
}
```

#### Caricamento TV Series per Edit
```typescript
loadTVSeries(id: number): void {
  this.loading = true;
  this.error = '';

  this.apiService.getTVSeries().subscribe({
    next: (response: any) => {
      // Trova TV series specifica per ID
      const allSeries = response.data || [];
      this.tvSeries = allSeries.find((series: any) => series.tv_series_id === id);
      if (!this.tvSeries) {
        this.error = 'TV series not found';
      }
      this.loading = false;
    },
    error: (error: any) => {
      this.error = 'Failed to load TV series data';
      this.loading = false;
    }
  });
}
```

#### Gestione Submit Form
```typescript
onFormSubmit(formData: FormData): void {
  // Backup dati form correnti prima del submit
  this.backupFormData();
  
  this.loading = true;
  this.error = '';
  this.success = '';

  const request = this.isEditMode 
    ? this.apiService.updateCompleteTvSeries(this.tvSeries!.tv_series_id, formData)
    : this.apiService.createCompleteTvSeries(formData);

  request.subscribe({
    next: (response: any) => {
      this.success = this.isEditMode 
        ? 'TV Series updated successfully!' 
        : 'TV Series created successfully!';
      this.loading = false;
      
      // Pulisce backup al successo e reindirizza
      this.formDataBackup = null;
      setTimeout(() => {
        this.router.navigate(['/dashboard/admin/tvseries']);
      }, 2000);
    },
    error: (error: any) => {
      this.loading = false;
      
      // Ripristina dati form da backup per prevenire perdita dati
      this.restoreFormData();
      
      // Gestisce errori validazione server-side
      if (error.error && error.error.errors) {
        const errorMessages = Object.values(error.error.errors).flat();
        this.error = `Validation errors: ${errorMessages.join(', ')}`;
      } else if (error.error && error.error.message) {
        this.error = `Error: ${error.error.message}`;
      } else {
        this.error = this.isEditMode 
          ? 'Failed to update TV series. Please try again.'
          : 'Failed to create TV series. Please try again.';
      }
    }
  });
}
```

#### Sistema Backup/Restore Dati Form
```typescript
private backupFormData(): void {
  if (this.tvSeriesForm && this.tvSeriesForm.tvSeriesForm) {
    this.formDataBackup = {
      formValue: { ...this.tvSeriesForm.tvSeriesForm.value },
      posterFile: this.tvSeriesForm.posterFile,
      backdropFile: this.tvSeriesForm.backdropFile,
      trailerVideoFile: this.tvSeriesForm.trailerVideoFile,
      episodeFiles: { ...this.tvSeriesForm.episodeFiles },
      episodeVideoFiles: { ...this.tvSeriesForm.episodeVideoFiles },
      posterPreviewUrl: this.tvSeriesForm.posterPreviewUrl,
      backdropPreviewUrl: this.tvSeriesForm.backdropPreviewUrl,
      episodeImagePreviewUrls: { ...this.tvSeriesForm.episodeImagePreviewUrls }
    };
  }
}

private restoreFormData(): void {
  if (this.formDataBackup && this.tvSeriesForm) {
    // Ripristina valori form
    this.tvSeriesForm.tvSeriesForm.patchValue(this.formDataBackup.formValue);
    
    // Ripristina riferimenti file
    this.tvSeriesForm.posterFile = this.formDataBackup.posterFile;
    this.tvSeriesForm.backdropFile = this.formDataBackup.backdropFile;
    this.tvSeriesForm.trailerVideoFile = this.formDataBackup.trailerVideoFile;
    this.tvSeriesForm.episodeFiles = this.formDataBackup.episodeFiles;
    this.tvSeriesForm.episodeVideoFiles = this.formDataBackup.episodeVideoFiles;
    
    // Ripristina URL preview
    this.tvSeriesForm.posterPreviewUrl = this.formDataBackup.posterPreviewUrl;
    this.tvSeriesForm.backdropPreviewUrl = this.formDataBackup.backdropPreviewUrl;
    this.tvSeriesForm.episodeImagePreviewUrls = this.formDataBackup.episodeImagePreviewUrls;
  }
}
```

## 3. TVSERIES.MODELS.TS

### Interfacce TypeScript

#### ImageData
```typescript
export interface ImageData {
  url: string;
  sizes: {
    w92?: string;
    w154?: string;
    w185?: string;
    w300?: string;
    w342?: string;
    w500?: string;
    w780?: string;
    w1280?: string;
    original: string;
  };
  width: number;
  height: number;
  format: string;
}
```

#### TVSeries
```typescript
export interface TVSeries {
  tv_series_id: number;
  title: string;
  year: number;
  imdb_rating: number;
  total_seasons: number;
  total_episodes: number;
  status: string;
  category: Category;
  poster: ImageData;
  description?: string;
  backdrop?: ImageData;
  persons?: Person[];
  trailers?: Trailer[];
  seasons?: Season[];
}
```

#### Season
```typescript
export interface Season {
  season_id: number;
  season_number: number;
  name: string;
  year: string;
  episodes: Episode[];
}
```

#### Episode
```typescript
export interface Episode {
  episode_id: number;
  episode_number: number;
  title: string;
  description: string;
  still?: string;
  trailer?: string;
}
```

## 4. TEMPLATE HTML (TVSERIES-FORM.COMPONENT.HTML)

### STRUTTURA PRINCIPALE
Il template è organizzato in sezioni:

1. **Basic Information** - Titolo e descrizione
2. **TV Series Details** - Anno, stagioni, episodi, rating, status, categoria
3. **Trailers** - Gestione trailer con FormArray
4. **Cast** - Gestione cast con modal di ricerca
5. **Seasons & Episodes** - Gestione stagioni ed episodi con FormArray annidati
6. **Sidebar** - Upload poster, backdrop, trailer video

### CARATTERISTICHE PRINCIPALI

#### Form Reattivo
```html
<form [formGroup]="tvSeriesForm" (ngSubmit)="onSubmit()" novalidate class="tvseries-form">
```

#### Gestione Errori Validazione
```html
<div *ngIf="hasError('title')" class="text-danger">
  <small>{{ getErrorMessage('title') }}</small>
</div>
```

#### Upload File con Preview
```html
<input type="file" class="form-control" id="posterUpload" (change)="onPosterUpload($event)" accept="image/*">
<div *ngIf="posterPreviewUrl">
  <img [src]="posterPreviewUrl" class="img-fluid rounded poster-image" alt="TV Series Poster">
</div>
```

#### FormArray per Stagioni ed Episodi
```html
<div formArrayName="seasons">
  <div *ngFor="let season of seasonsArray.controls; let seasonIndex = index" [formGroupName]="seasonIndex">
    <div formArrayName="episodes">
      <div *ngFor="let episode of getEpisodesArray(seasonIndex).controls; let episodeIndex = index" [formGroupName]="episodeIndex">
        <!-- Campi episodio -->
      </div>
    </div>
  </div>
</div>
```

#### Modal Ricerca Persone
```html
<ng-template #personModal>
  <div class="modal-body">
    <input type="text" #searchPersonInput (input)="searchPersonInModal(searchPersonInput.value)">
    <div *ngFor="let person of persons; trackBy: trackByPersonId">
      <button (click)="selectPersonFromModal(person.person_id.toString())">
        {{ person.name }}
      </button>
    </div>
  </div>
</ng-template>
```

## 5. FLUSSO OPERATIVO COMPLETO

### Creazione Nuova TV Series
1. Utente naviga a `/dashboard/admin/tvseries/create`
2. TVSeriesFormPageComponent inizializza in modalità create
3. TVSeriesFormComponent carica dati (categorie, persone)
4. Utente compila form e carica file
5. Al submit, prepareFormData() crea FormData con tutti i dati e file
6. TVSeriesFormPageComponent chiama apiService.createCompleteTvSeries()
7. In caso di successo, reindirizza alla lista TV Series
8. In caso di errore, ripristina dati form da backup

### Modifica TV Series Esistente
1. Utente naviga a `/dashboard/admin/tvseries/edit/:id`
2. TVSeriesFormPageComponent carica TV Series esistente
3. populateForm() popola il form con dati esistenti
4. Utente modifica dati e/o carica nuovi file
5. Al submit, prepareFormData() crea FormData aggiornato
6. TVSeriesFormPageComponent chiama apiService.updateCompleteTvSeries()
7. Gestione successo/errore come per creazione

### Gestione File Upload
- File vengono salvati localmente quando selezionati
- Preview URL vengono generati per feedback utente
- Nel prepareFormData(), file vengono aggiunti al FormData
- Backend riceve file con nomi corretti (poster_image, backdrop_image, etc.)

### Gestione Errori e Backup Dati
- Prima di ogni submit, dati form vengono salvati in backup
- In caso di errore server, dati vengono ripristinati da backup
- Previene perdita dati utente su errori validazione

## 6. MAPPATURE IMPORTANTI

### Status Frontend -> Backend
```typescript
const statusMapping: { [key: string]: string } = {
  'published': 'ongoing',
  'draft': 'unknown',
  'upcoming': 'upcoming',
  'ended': 'ended'
};
```

### Nomi File per Backend
- Poster: `poster_image`
- Backdrop: `backdrop_image`
- Trailer Video: `trailer_video`
- Immagine Episodio: `still_image`
- Video Episodio: `episode_video`

### Struttura FormData per Backend
```
title: string
year: string
category_id: string
description: string
status: string (mappato)
poster_image: File
backdrop_image: File
trailer_video: File (opzionale)
persons[]: string[] (array di ID numerici)
seasons[0][season_number]: string
seasons[0][total_episodes]: string
seasons[0][year]: string
seasons[0][name]: string
seasons[0][overview]: string
seasons[0][premiere_date]: string
seasons[0][episodes][0][episode_number]: string
seasons[0][episodes][0][title]: string
seasons[0][episodes][0][overview]: string
seasons[0][episodes][0][air_date]: string
seasons[0][episodes][0][runtime]: string
seasons[0][episodes][0][status]: string
seasons[0][episodes][0][still_image]: File
seasons[0][episodes][0][episode_video]: File
```

## 7. DIPENDENZE E SERVIZI

### ApiService Methods utilizzati
- getCategories() - Carica categorie
- getPersons() - Carica persone
- searchPersons(searchTerm) - Ricerca persone
- createCompleteTvSeries(formData) - Crea TV Series
- updateCompleteTvSeries(id, formData) - Aggiorna TV Series
- getTVSeries() - Carica lista TV Series
- deleteTVSeries(id) - Elimina TV Series

### Dipendenze Angular
- @angular/forms (ReactiveFormsModule)
- @angular/router
- ngx-bootstrap/modal
- @angular/common/http

## 8. BEST PRACTICES IMPLEMENTATE

1. **Reactive Forms** - Validazione robusta e gestione stato
2. **FormArray** - Gestione dinamica stagioni/episodi
3. **File Upload Locale** - Evita chiamate API multiple
4. **Preview Immagini** - Feedback immediato utente
5. **Backup/Restore Dati** - Prevenzione perdita dati
6. **Validazione Client/Server** - Doppio livello validazione
7. **TypeScript Interfaces** - Tipizzazione forte
8. **Component Separation** - Form separato da page logic
9. **Error Handling** - Gestione errori completa
10. **Loading States** - Feedback visivo operazioni async

## 9. PROBLEMI RISOLTI

1. **Errori 422 Upload API** - Risolto tornando a upload diretto nel form finale
2. **Perdita Dati su Errori** - Risolto con sistema backup/restore
3. **Mappatura Status** - Frontend/backend status mapping
4. **Nomi Campi File** - Corretti per backend expectations
5. **Calcolo Total Episodes** - Automatico se non fornito
6. **Validazione Persons Array** - Solo ID numerici validi

Questa documentazione copre tutti gli aspetti del sistema TV Series, dai dettagli implementativi ai flussi operativi completi.
